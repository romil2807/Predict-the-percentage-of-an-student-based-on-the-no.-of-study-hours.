# -*- coding: utf-8 -*-
"""Task-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YXY596Hx1P6aQSKHAmYG5mZAlIa7HaTq

# **Romil Shah**
# Task: Predict the percentage of an student based on the no. of study hours.

## Importing libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# %matplotlib inline 
print('Libraries imported successfully')

df=pd.read_csv('/content/student_scores.csv')
df

df.head()

df.tail()

"""# Cleaning the data"""

df.isnull().sum()

df.describe()

df.info()

df.corr()

"""# Visualizing the data"""

#visualizing with line plot
plt.style.use('ggplot')
df.plot(kind='line')
plt.title("Hours Vs Percentage")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage Scored")
plt.show()

#visualizing with area plot
xmin=min(df.Hours)
xmax=max(df.Hours)
df.plot(kind='area',alpha=0.8,stacked=True,figsize=(10,5),xlim=(xmin,xmax))
plt.title("Hours Vs Score",size=15)
plt.xlabel("Hours",size=15)
plt.ylabel("Score",size=15)
plt.show()

#visualizing with scatter plot
df.plot(kind='scatter',x='Hours',y='Scores',color='r',figsize=(8,5))
plt.title("Hours Vs Percentage")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage Scored")
plt.show()

"""# Modelling the data"""

#modelling the data
x=np.asanyarray(df[['Hours']])
y=np.asanyarray(df['Scores'])

#using train test split to split the data
train_x,test_x,train_y,test_y=train_test_split(x,y,test_size=0.4,random_state=2)
regressor=LinearRegression()
regressor.fit(train_x,train_y)
print("Training Completed")
print("Coefficients:",regressor.coef_)
print("Intercept:",regressor.intercept_)

df.plot(kind='scatter',x='Hours',y='Scores',color='r',figsize=(8,5))
plt.plot(train_x,regressor.coef_[0]*train_x + regressor.intercept_,color='b')
plt.title("Hours Vs Percentage")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage Scored")
plt.show()

#evaluating mean absolute error and R2 using metrics to determine the accuracy
from sklearn import metrics
from sklearn.metrics import r2_score
y_pred=regressor.predict(test_x)
print("Mean Absolute Error: {}".format(metrics.mean_absolute_error(y_pred,test_y)))
print("R2 score: %.2f" % r2_score(y_pred,test_y))

#actual vs predicted
df2=pd.DataFrame({'Actual':test_y,'Predicted':y_pred})
df2

"""# Predicting score by given value"""

#predicting the score by the value given
hours=9.25
predicted_score=regressor.predict([[hours]])
print(f'No. of hours={hours}')
print(f'Predicted Score={predicted_score[0]}')